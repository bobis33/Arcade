/*
** EPITECH PROJECT, 2024
** B-OOP-400-BDX-4-1-arcade-elliot.masina
** File description:
** map.cpp
*/

#include "Arcade/Nibbler.hpp"

void Arcade::Nibbler::createWall()
{
    if (_lvl == 1)
        _mapPositionWall = {
                {' ', ' ', 'o', ' ', ' ', ' ', 'o', ' ', ' ', ' ', 'o', ' ', ' ', ' ', 'o', ' ', ' '},
                {' ', 'X', 'X', 'X', ' ', 'X', ' ', 'X', 'X', 'X', ' ', 'X', ' ', 'X', 'X', 'X', ' '},
                {'o', 'X', ' ', 'X', 'o', 'X', ' ', ' ', ' ', ' ', ' ', 'X', 'o', 'X', ' ', 'X', 'o'},
                {' ', 'X', 'X', 'X', ' ', 'X', ' ', 'X', ' ', 'X', ' ', 'X', ' ', 'X', 'X', 'X', ' '},
                {' ', ' ', ' ', ' ', ' ', 'X', 'o', 'X', ' ', 'X', 'o', 'X', ' ', ' ', ' ', ' ', ' '},
                {' ', 'X', 'X', 'X', 'X', 'X', ' ', 'X', ' ', 'X', ' ', 'X', 'X', 'X', 'X', 'X', ' '},
                {'o', 'X', ' ', 'o', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'o', ' ', 'X', 'o'},
                {' ', 'X', ' ', 'X', 'X', 'X', 'X', 'X', 'o', 'X', 'X', 'X', 'X', 'X', ' ', 'X', ' '},
                {' ', ' ', ' ', 'o', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'o', ' ', ' ', ' '},
                {' ', 'X', 'X', 'X', 'X', 'X', ' ', 'X', 'X', 'X', ' ', 'X', 'X', 'X', 'X', 'X', ' '},
                {' ', ' ', 'o', ' ', ' ', ' ', ' ', 'X', ' ', 'X', ' ', ' ', ' ', ' ', 'o', ' ', ' '},
                {' ', 'X', 'X', 'X', ' ', 'X', ' ', 'X', 'X', 'X', ' ', 'X', ' ', 'X', 'X', 'X', ' '},
                {' ', 'X', ' ', 'X', ' ', 'X', ' ', ' ', 'o', ' ', ' ', 'X', ' ', 'X', ' ', 'X', ' '},
                {'o', 'X', 'X', 'X', 'o', 'X', 'o', 'X', 'X', 'X', 'o', 'X', 'o', 'X', 'X', 'X', 'o'},
                {'o', ' ', ' ', ' ', ' ', 'X', ' ', 'X', ' ', 'X', ' ', 'X', ' ', ' ', ' ', ' ', 'o'},
                {' ', 'X', 'X', 'X', 'X', 'X', ' ', 'X', 'X', 'X', ' ', 'X', 'X', 'X', 'X', 'X', ' '},
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}
        };
    else if (_lvl == 2)
        _mapPositionWall = {
                {' ', ' ', 'o', ' ', ' ', ' ', 'o', ' ', ' ', ' ', 'o', ' ', ' ', ' ', 'o', ' ', ' '},
                {' ', 'X', 'X', 'X', 'X', 'X', ' ', 'X', ' ', 'X', ' ', 'X', 'X', 'X', 'X', 'X', ' '},
                {'o', ' ', ' ', ' ', 'o', ' ', ' ', 'X', ' ', 'X', ' ', ' ', 'o', ' ', ' ', ' ', 'o'},
                {' ', 'X', 'X', 'X', ' ', 'X', 'X', 'X', ' ', 'X', 'X', 'X', ' ', 'X', 'X', 'X', ' '},
                {' ', 'X', ' ', 'X', ' ', ' ', 'o', ' ', ' ', ' ', 'o', ' ', ' ', 'X', ' ', 'X', ' '},
                {' ', 'X', 'X', 'X', ' ', 'X', 'X', 'X', 'X', 'X', 'X', 'X', ' ', 'X', 'X', 'X', ' '},
                {'o', ' ', ' ', 'o', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'o', ' ', ' ', 'o'},
                {'X', 'X', ' ', 'X', 'X', 'X', 'X', 'X', 'o', 'X', 'X', 'X', 'X', 'X', ' ', 'X', 'X'},
                {' ', ' ', ' ', 'o', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', 'o', ' ', ' ', ' '},
                {' ', 'X', 'X', 'X', 'X', 'X', 'X', 'X', ' ', 'X', 'X', 'X', 'X', 'X', 'X', 'X', ' '},
                {' ', ' ', 'o', ' ', ' ', ' ', ' ', 'X', ' ', 'X', ' ', ' ', ' ', ' ', 'o', ' ', ' '},
                {' ', 'X', 'X', 'X', 'X', 'X', ' ', 'X', ' ', 'X', ' ', 'X', 'X', 'X', 'X', 'X', ' '},
                {' ', ' ', ' ', ' ', ' ', 'X', ' ', ' ', 'o', ' ', ' ', 'X', ' ', ' ', ' ', ' ', ' '},
                {'o', 'X', ' ', 'X', 'o', 'X', 'o', 'X', ' ', 'X', 'o', 'X', 'o', 'X', ' ', 'X', 'o'},
                {'o', 'X', ' ', 'X', ' ', ' ', ' ', 'X', ' ', 'X', ' ', ' ', ' ', 'X', ' ', 'X', 'o'},
                {' ', 'X', ' ', 'X', 'X', 'X', 'X', 'X', ' ', 'X', 'X', 'X', 'X', 'X', ' ', 'X', ' '},
                {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '}
        };
}

void Arcade::Nibbler::createMap()
{
    _map.resize(MAP_HEIGHT);
    for (size_t i = 0; i < MAP_HEIGHT; ++i) {
        _map[i].resize(MAP_WIDTH);
        for (size_t j = 0; j < MAP_WIDTH; ++j) {
            _map[i][j] = {(SIZE_BOX * j) + SIZE_BOX, (SIZE_BOX * i) + SIZE_BOX};
        }
    }
    createWall();
    createFood();
}
